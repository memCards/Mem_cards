package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import control.CategoryController;
import control.UserController;
import entity.Card;
import entity.Category;
import entity.User;
import ui.ButtonStyle;

import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import java.awt.*;
import java.util.List;
import java.util.*;
import java.util.stream.Collectors;

public class QuizCategorySelectionForm extends JFrame {
    private transient User user;
    private JPanel mainPanel;
    private JComboBox<String> categoryBox;
    private JButton continueButton;
    private JButton exitButton;
    private List<String> categoryNameList;

    public QuizCategorySelectionForm(User user) {
        this.user = user;
        $$$setupUI$$$();
        this.setTitle("Category selection");
        this.setContentPane(mainPanel);
        setButtonStyle();
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.setPreferredSize(new Dimension(500, 270));
        this.pack();
        FrameLocation.setFrameLocation(this);
        setVisible(true);
        initCategoryBox();
        exitButtonListener();
        continueButtonListener();
    }

    private void initCategoryBox() {
        CategoryController categoryController = new CategoryController();
        List<String> categories = categoryController
                .getAllCategories()
                .stream()
                .map(Category::getCategoryName)
                .collect(Collectors.toList());
        categoryNameList = categoryController.getAllCategories().stream().map(Category::getCategoryName).collect(Collectors.toList());
        for (String category : categories) categoryBox.addItem(category);
    }

    private void continueButtonListener() {
        continueButton.addActionListener(event -> {
            int i = categoryBox.getSelectedIndex();
            String selectedCategory = categoryNameList.get(i);
            if (createCardsArray(selectedCategory).isEmpty()) {
                this.setVisible(false);
                JOptionPane.showMessageDialog(mainPanel,
                        "В данной категории нет карточек");
            } else {
                new QuizForm(createCardsArray(selectedCategory));
                setVisible(false);
            }

        });
    }

    private List<Card> createCardsArray(String selectedCategory) {
        user = new UserController().getUserByEmail(user.getEmail());
        List<Card> quizList = new ArrayList<>();
        Set<Card> cards = user.getCards();
        if (cards.isEmpty()) {
            this.setVisible(false);
            JOptionPane.showMessageDialog(mainPanel,
                    "У Вас еще нет карточек!");
        } else {
            for (Card card : cards) {
                Set<Category> categoryList = card.getCategories();
                for (Category category : categoryList) {
                    if (selectedCategory.equals(category.getCategoryName())) {
                        quizList.add(card);
                        break;
                    }
                }
            }
        }
        Collections.shuffle(quizList);
        return quizList;
    }

    private void exitButtonListener() {
        exitButton.addActionListener(event -> this.setVisible(false));
    }

    private void setButtonStyle() {
        ButtonStyle buttonStyle = new ButtonStyle();
        for (Component component : mainPanel.getComponents()) {
            if (component instanceof JButton) {
                ((JButton) component).setUI(buttonStyle);
                component.setBackground(new Color(0xF7A962E0, true));
                component.setForeground(Color.white);
            }
        }
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
        panel1.add(mainPanel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        Font label1Font = this.$$$getFont$$$("Arial", -1, 18, label1.getFont());
        if (label1Font != null) label1.setFont(label1Font);
        label1.setForeground(new Color(-12449917));
        label1.setText("Выберите категорию для викторины");
        mainPanel.add(label1, new GridConstraints(0, 1, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        categoryBox = new JComboBox();
        mainPanel.add(categoryBox, new GridConstraints(1, 1, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        continueButton = new JButton();
        continueButton.setText("Продолжить");
        mainPanel.add(continueButton, new GridConstraints(2, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Выход");
        mainPanel.add(exitButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(1, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        mainPanel.add(spacer2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

}
