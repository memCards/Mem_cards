package view;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import control.CardController;
import entity.Card;
import entity.User;
import ui.ButtonStyle;

import javax.swing.*;
import java.awt.*;

public class NewCardForm extends JFrame {
    private JLabel questLabel;
    private JTextField questText;
    private JLabel answerLabel;
    private JTextPane answerPane;
    private JPanel mainPanel;
    private JButton saveButton;
    private JButton categoryButton;

    private final CardsListForm cardsListForm;
    private final transient User user;
    private final transient CardController cardController;
    private final CategoryForm categoryForm = new CategoryForm();

    public NewCardForm(User user, CardsListForm cardsListForm) {
        this.cardsListForm = cardsListForm;
        this.user = user;
        cardController = new CardController();

        this.setTitle("Новая карточка");
        this.setContentPane(mainPanel);
        initButton();
        this.setDefaultCloseOperation(WindowConstants.DISPOSE_ON_CLOSE);
        this.pack();
    }

    private void initButton() {
        saveButton.setUI(new ButtonStyle());
        saveButton.setBackground(new Color(0xF7A962E0, true));
        saveButton.setForeground(Color.white);
        saveButton.addActionListener(e -> pushCard());

        categoryButton.setUI(new ButtonStyle());
        categoryButton.setBackground(new Color(0xF7A962E0, true));
        categoryButton.setForeground(Color.white);
        final JPopupMenu menu = new JPopupMenu();
        menu.add(categoryForm);
        categoryForm.setMenu(menu);
        categoryButton.addActionListener(e -> menu.show(this, categoryButton.getBounds().x,
                categoryButton.getBounds().y + categoryButton.getBounds().height));
    }

    private void pushCard() {
        if (!questText.getText().isEmpty() && !answerPane.getText().isEmpty()) {
            Card card = new Card();
            card.setId((long) 0);
            card.setQuestion(questText.getText());
            card.setAnswer(answerPane.getText());
            card.addUser(user);
            card.addCategories(categoryForm.getCategories());

            cardController.addCard(card);
            cardsListForm.updateList();
        } else {
            new ErrorPane().displayError("Вопрос и ответ не должны быть пустыми.", "Ошибка!");
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new GridLayoutManager(5, 2, new Insets(0, 0, 0, 0), -1, -1));
        final Spacer spacer1 = new Spacer();
        mainPanel.add(spacer1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        questText = new JTextField();
        mainPanel.add(questText, new GridConstraints(1, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        answerPane = new JTextPane();
        answerPane.putClientProperty("charset", "");
        answerPane.putClientProperty("html.disable", Boolean.FALSE);
        mainPanel.add(answerPane, new GridConstraints(3, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(300, 100), null, 0, false));
        saveButton = new JButton();
        saveButton.setText("Сохранить");
        mainPanel.add(saveButton, new GridConstraints(4, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        mainPanel.add(panel1, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        questLabel = new JLabel();
        questLabel.setHorizontalAlignment(2);
        questLabel.setHorizontalTextPosition(11);
        questLabel.setText("Вопрос");
        panel1.add(questLabel, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(234, 16), null, 0, false));
        categoryButton = new JButton();
        categoryButton.setText("Категории");
        panel1.add(categoryButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        answerLabel = new JLabel();
        answerLabel.setHorizontalAlignment(2);
        answerLabel.setText("Ответ");
        mainPanel.add(answerLabel, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }

}
